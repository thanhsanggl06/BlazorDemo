@* Stack Component - Tương tự MUI Stack *@

<div class="@GetStackClass()" style="@GetStackStyle()" @attributes="AdditionalAttributes">
    @ChildContent
</div>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string Direction { get; set; } = "column"; // column, row, column-reverse, row-reverse

    [Parameter]
    public int Spacing { get; set; } = 2; // 0-5 (Bootstrap spacing units)

    [Parameter]
    public string? JustifyContent { get; set; } // start, center, end, between, around, evenly

    [Parameter]
    public string? AlignItems { get; set; } // start, center, end, baseline, stretch

    [Parameter]
    public bool Divider { get; set; } = false;

    [Parameter]
    public string? DividerColor { get; set; } = "border";

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private string GetStackClass()
    {
        var classes = new List<string> { "d-flex" };

        // Direction
        var flexDirection = Direction.ToLower() switch
        {
            "row" => "flex-row",
            "row-reverse" => "flex-row-reverse",
            "column-reverse" => "flex-column-reverse",
            _ => "flex-column"
        };
        classes.Add(flexDirection);

        // Spacing (gap utility)
        if (Spacing > 0)
        {
            classes.Add($"gap-{Spacing}");
        }

        // Justify Content
        if (!string.IsNullOrEmpty(JustifyContent))
        {
            classes.Add($"justify-content-{JustifyContent}");
        }

        // Align Items
        if (!string.IsNullOrEmpty(AlignItems))
        {
            classes.Add($"align-items-{AlignItems}");
        }

        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }

        return string.Join(" ", classes);
    }

    private string? GetStackStyle()
    {
        var styles = new List<string>();

        // Divider styles (nếu cần)
        if (Divider)
        {
            var borderDirection = Direction.ToLower().Contains("column") ? "border-top" : "border-start";
            styles.Add($"--stack-divider: 1px solid var(--bs-{DividerColor})");
        }

        if (!string.IsNullOrEmpty(Style))
        {
            styles.Add(Style);
        }

        return styles.Count > 0 ? string.Join("; ", styles) : null;
    }
}